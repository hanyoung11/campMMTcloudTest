//
//  CAMPFECEncoder-v1.cpp
//  CAMP-MMTServer-v1
//
//  Created by Taeseop Kim & YC on 2016. 12. 1..
//  Copyright © 2016년 MediaLab, KHU. All rights reserved.
//

#include "CAMPFECEncoder-v1.h"

//FEC Encoder-------------------------------------------------------------------
FECEncoderClass::FECEncoderClass()
{

}

FECEncoderClass::FECEncoderClass(int asset)
{
    m_SBN = 0;
    m_ESI = 0;
    m_NSize = N_MAX;
    m_Asset = asset;
    m_TSize = T_MAX;
    if(m_Asset == 0)
        m_AssetNSize = N_SIZE_AUDIO;
    else if(m_Asset == 1)
        m_AssetNSize = N_SIZE_L0;
    else if(m_Asset == 2)
        m_AssetNSize = N_SIZE_L1;
    else
        m_AssetNSize = N_SIZE_L2;

    m_Sys.AllocMem2D(m_Symbols, N_MAX-K, T_MAX);
    m_Sys.AllocMem2D(m_MatrixA, N_MAX, K);
    m_Sys.AllocMem2D(m_Data, K, T_MAX);
    m_Sys.AllocMem2D(m_TAIL, N_MAX-K, 4);
    // always the same matrix Q

    for(int i = 0; i < N_MAX; i++)
    {
        memcpy(m_MatrixA[i], m_Sys.QMatrix[i], K);
    }

    for(int i = 0; i < N_MAX - K; i++)
    {
        m_TAIL[i][2] = i; // ESI for repair packets
    }


}

FECEncoderClass::~FECEncoderClass()
{
    m_Sys.DeleteMem2D(m_MatrixA, N_MAX, K);
    m_Sys.DeleteMem2D(m_Data, N_MAX, T_MAX);
    m_Sys.DeleteMem2D(m_Symbols, N_MAX, T_MAX);
    m_Sys.DeleteMem2D(m_TAIL, N_MAX-K, 4);
}

//////////////////////////////////////////////////////////////////////
//  Gen FEC Tails
//  in  : MMTP*, time
//  out : Null
//////////////////////////////////////////////////////////////////////
void FECEncoderClass::GenFECTails(MMTPacketStruct **mmtp, int packetNum, uint time, bool flag, int TSize)
{
    if(flag == true) //First Audio data
    {
        m_PastSBN = m_SBN;
        m_PastESI = m_ESI;
    }
    m_TSize = TSize;

    int pastSBN = m_SBN;

    ///Calc  SBNum
    m_SBNum = packetNum / K;
    if(packetNum%K > 0)
    {
        m_SBNum++;
    }
    m_PaddingESI = packetNum%K;

    ///Generate FEC Tails
    for(int i = 0; i<packetNum; i++)
    {

        ///FEC tail
        memcpy(&(mmtp[i]->Data[mmtp[i]->PacketLen-4]),&m_SBN,2);    //modified at 20161204
        if(esi49 == true){
            esi49 = false;
            mmtp[i]->Data[mmtp[i]->PacketLen-2] = 49;                //modified at 20161204
            printf("m_SBN: %d,   m_ESI: %d,   m_PaddingESI: %d,   m_SBNum: %d\n",m_SBN,mmtp[i]->Data[mmtp[i]->PacketLen-2],m_PaddingESI,m_SBNum );
        }
        else{
            mmtp[i]->Data[mmtp[i]->PacketLen-2] = m_ESI;
        }

        ///Not full SB
        if(m_SBN == pastSBN+m_SBNum-1&&(m_PaddingESI!=0))           //modified at 20161204
        {
            mmtp[i]->Data[mmtp[i]->PacketLen-1] = m_PaddingESI;      //modified at 20161204

        }
        else    ///Full SB
        {
            mmtp[i]->Data[mmtp[i]->PacketLen-1] = K;                //modified at 20161204

        }
        //printf("!!! %d %d %d\n",m_SBN,mmtp[i]->data[mmtp[i]->data_size-2],mmtp[i]->data[mmtp[i]->data_size-1]);
        ///time stamp
        memcpy(&(mmtp[i]->Data[4]),&time,4);                        //modified at 20161204

        ///SBN, ESI control
        m_ESI += (mmtp[i]->PacketLen-4) / m_TSize;
        if((mmtp[i]->PacketLen-4)%m_TSize > 0)
        {
            m_ESI++;
        }
        if(m_ESI >= K)
        {
            esi49 = true;
            m_ESI -= K;
            m_SBN++;
        }
    }

    if(m_ESI >=48){
        printf("m_SBN: %d,   m_ESI: %d,   m_PaddingESI: %d,   m_SBNum: %d\n",m_SBN,m_ESI,m_PaddingESI,m_SBNum );
    }
    m_ESI=0;            //modified 2016.12.06
    m_SBN++;
}

//////////////////////////////////////////////////////////////////////
//  Do FEC MMTP packets
//  in  : MMTP, MPUFragments, T size
//  out : # of SBs
//////////////////////////////////////////////////////////////////////
int FECEncoderClass::GetFECPackets(MMTPacketStruct **mmtp, MPUFragmentStruct **repairFragments, int packetNum, int Tsize)
{
    m_TSize=Tsize;

    int i,left_size;

    BYTE esi;
    m_ESI=m_PastESI;
    m_SBN=m_PastSBN;

    int FragNum=0;


    ///Calc  SBNum
    m_SBNum=packetNum/K;
    if(packetNum%K>0)
    {
        m_SBNum++;
    }
    m_PaddingESI = packetNum%K;

    if (m_PaddingESI == 0)
    {
        m_PaddingESI = K;
    }

    // stack MMTP packets to data

    for(i=0; i<packetNum; i++)
    {
        esi = m_ESI;
        //printf("%d  %d %d %d\n",mmtp[i]->data_size,*((SHORT *)(&(mmtp[i]->data[mmtp[i]->data_size-4]))),mmtp[i]->data[mmtp[i]->data_size-2],mmtp[i]->data[mmtp[i]->data_size-1]);

        for(left_size = mmtp[i]->PacketLen-4; left_size > 0; )
        {

            if(left_size > m_TSize)
            {
                memcpy(*(m_Data+m_ESI), mmtp[i]->Data+(m_ESI-esi)*m_TSize, m_TSize);
                left_size -= m_TSize;

            }
            else
            {
                memcpy(*(m_Data+m_ESI), mmtp[i]->Data+(m_ESI-esi)*m_TSize, left_size);
                left_size -= left_size;

            }
            m_ESI++;

            //printf("m_SBM: %d,   m_ESI: %d,   m_PaddingESI: %d,   m_BNum: %d\n",m_SBN,m_ESI,m_PaddingESI,m_SBNum );
            if(m_ESI == K) ///FEC Encoding (full ESI)
            {

                m_NSize=m_AssetNSize;
                FECEncoding();
                MakeRepPackets(&repairFragments[FragNum]);
                ResetFECBuf();
                FragNum+=(m_NSize-K);

            }
            ///FEC Encoding(not full)
            else if((m_SBN==m_SBNum+m_PastSBN-1)&&m_ESI==m_PaddingESI) //modified at 20161204
            {

                m_NSize=K+m_PaddingESI;
                if(m_NSize>m_AssetNSize)
                {
                    m_NSize=m_AssetNSize;
                }
                FECEncoding();
                MakeRepPackets(&repairFragments[FragNum]);
                ResetFECBuf();
                FragNum+=(m_NSize-K);

            }
        }

    }

    m_PastESI=m_ESI;
    m_PastSBN=m_SBN;

    return FragNum;
}

//////////////////////////////////////////////////////////////////////48000
//  Return Repair packets to MFUFragments
//  in  : MPUFragment**
//  out : Null
//////////////////////////////////////////////////////////////////////
void FECEncoderClass::MakeRepPackets(MPUFragmentStruct **repairFragments)
{
    for(int i=0; i<m_NSize-K; i++)
    {
        memset(repairFragments[i]->data,0,T_MAX+4);
        memcpy(repairFragments[i]->data,m_Symbols[i],m_TSize);

        for(int j=0; j<4; j++)
        {
            repairFragments[i]->data[m_TSize+j] = m_TAIL[i][j]; //modified at 20161204
        }
        //fwrite(repairFragments[i]->data,m_TSize,1,f);
        repairFragments[i]->data_size = m_TSize+4;
        repairFragments[i]->fragment_type = 3;                    //modified at 20161204
        repairFragments[i]->asset_id = m_Asset;

    }

}

//////////////////////////////////////////////////////////////////////
//  Set costumized FEC rate
//  in  : rate
//  out :
//////////////////////////////////////////////////////////////////////
void FECEncoderClass::SetCodingRate(double rate)  // QoS Board
{
    m_AssetNSize = K + (int)(K*rate) + 1;
}

//////////////////////////////////////////////////////////////////////
//  Reset Data, Symbol buf
//  in  :
//  out :
//////////////////////////////////////////////////////////////////////
void FECEncoderClass::ResetFECBuf()
{
    //SBN = 0;
    m_ESI = 0;

    for(int i = 0; i < N_MAX-K; i++)
    {
        memset(m_Symbols[i], 0, T_MAX);
    }

    for(int i=0; i<K; i++)
    {
        memset(m_Data[i], 0, T_MAX);
    }

    for(int i=0;i<m_NSize-K;i++)
    {
        memset(m_TAIL[i], 0, 4);
        m_TAIL[i][2] = i; // ESI for repair packets
    }
}

//////////////////////////////////////////////////////////////////////
//  Do FEC one symbol
//  in  :
//  out :
//////////////////////////////////////////////////////////////////////
void FECEncoderClass::FECEncoding()
{
    /// if NAMF is running, it will caculate N from coderate(Not yet).
    m_Sys.Matrix_multiply(m_MatrixA+K, m_Data, m_NSize-K, K, m_TSize, m_Symbols);

    /// Tails for repair symbols.
    for(int i = 0; i < m_NSize-K; i++)
    {
        *((short *)m_TAIL[i]) = m_SBN;
        m_TAIL[i][2] = i+K;
        if(m_SBN==m_PastSBN+m_SBNum-1&&(m_PaddingESI!=0))
        {
            m_TAIL[i][3] = m_PaddingESI;
        }
        else
        {
            m_TAIL[i][3] = K;
        }

    }
    /// Increase SBN after FEC encoding.
    m_SBN++;
    m_ESI = 0;        //modified 2016.12.06
    if(m_SBN > MAX_SBN_NUM)
        m_SBN = 0;

}


//FEC System ------------------------------------------------------------------
FECSystemClass::FECSystemClass()
{
    KEXT = K;
}

FECSystemClass::~FECSystemClass()
{

}

BYTE FECSystemClass::GF256_Multiplication(BYTE u,BYTE v)
{
    if(u==0||v==0)
    {
        return 0;
    }
    else
    {
        return ( OCT_EXP[OCT_LOG[u]+OCT_LOG[v]] );
    }
}
//For Octal Division
BYTE FECSystemClass::GF256_Division(BYTE u,BYTE v)
{
    if(u==0)
    {
        return 0;
    }
    else
    {
        return ( OCT_EXP[OCT_LOG[u]-OCT_LOG[v]+255]);
    }
}

void FECSystemClass::Matrix_multiply(BYTE **a,BYTE **b,int k,int m,int n,BYTE **c)
{
    //	c[0][0] = 100;//test
    int i,j,z;
    BYTE temp;
    for(i=0;i<k;i++)
    { for(j=0;j<n;j++)
	   {
           c[i][j]=0;
           temp=0;
           for(z=0;z<m;z++)
           {
               temp ^= GF256_Multiplication(a[i][z],b[z][j]);
           }
           c[i][j] = temp;
       }
    }
}

void FECSystemClass::AllocMem2D(BYTE **(&AllocMem), int height, int width)
{
    // 2D ==> 1D
    /*
     AllocMem = new BYTE*[height];
     for(int i=0; i < height; i++)
     {
        AllocMem[i] = new BYTE[width];
        memset(AllocMem[i], 0, width);
     }
     if(AllocMem != NULL)
     {
        delete [] AllocMem;
        AllocMem = NULL;
     }
    */
    // 1D ==> 2D: heapπÆ¡¶∞° ¿÷¥¬ ∞≈ ∞∞æ∆ æ∆∑°øÕ ∞∞¿Ã ∞Ìƒ£¥Ÿ. 928suh 2014
    BYTE *xx = new BYTE[height*width];
    memset(xx, 0, width*height);
    AllocMem = new BYTE*[height];
    for(int i=0; i < height; i++)
    {
        AllocMem[i] = xx+width*i;
    }// 1D ==> 2D
}

void FECSystemClass::DeleteMem2D(BYTE **(&AllocMem), int height, int width)
{
    for(int i=0; i < height; i++)
    {
        delete AllocMem[i];
    }
    delete AllocMem;
}

BYTE FECSystemClass::OCT_LOG[]=   // OCT_LOG[x] = 2^x
{0,  // suh insedrted...  2012. 10. 23
    0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75, 4, 100,
    224, 14, 52, 141, 239, 129, 28, 193, 105, 248, 200, 8, 76, 113, 5,
    138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218, 240, 18, 130, 69,
    29, 181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114,
    166, 6, 191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16, 145,
    34, 136, 54, 208, 148, 206, 143, 150, 219, 189, 241, 210, 19, 92,
    131, 56, 70, 64, 30, 66, 182, 163, 195, 72, 126, 110, 107, 58, 40,
    84, 250, 133, 186, 61, 202, 94, 155, 159, 10, 21, 121, 43, 78, 212,
    229, 172, 115, 243, 167, 87, 7, 112, 192, 247, 140, 128, 99, 13, 103,
    74, 222, 237, 49, 197, 254, 24, 227, 165, 153, 119, 38, 184, 180,
    124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209, 91, 149, 188,
    207, 205, 144, 135, 151, 178, 220, 252, 190, 97, 242, 86, 211, 171,
    20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162, 31, 45, 67, 216,
    183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111, 246, 108, 161,
    59, 82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90, 203,
    89, 95, 176, 156, 169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215,
    79, 174, 213, 233, 230, 231, 173, 232, 116, 214, 244, 234, 168, 80,
    88, 175
};
BYTE FECSystemClass::OCT_EXP[]=   // OCT_EXP[0] = 2^0 = 1
{1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76,
    152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157,
    39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159, 35,
    70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222,
    161, 95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60,
    120, 240, 253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163,
    91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52,
    104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59,
    118, 236, 197, 151, 51, 102, 204, 133, 23, 46, 92, 184, 109, 218,
    169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85,
    170, 73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198,
    145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171,
    75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65, 130, 25,
    50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81,
    162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9,
    18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11,
    22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71,
    142, 1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38,
    76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192,
    157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159,
    35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111,
    222, 161, 95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30,
    60, 120, 240, 253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223,
    163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26,
    52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147,
    59, 118, 236, 197, 151, 51, 102, 204, 133, 23, 46, 92, 184, 109, 218,
    169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85,
    170, 73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198,
    145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171,
    75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65, 130, 25,
    50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81,
    162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9,
    18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11,
    22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71,
    142

};


BYTE FECSystemClass::QMatrix[][49]={
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {4,140,70,173,216,108,184,92,46,153,76,239,190,17,135,205,102,188,94,161,80,40,221,110,112,56,1,142,
        201,234,117,180,90,106,53,148,131,65,32,109,54,149,196,236,191,209,105,186,148},
    {78,168,219,226,254,126,62,144,199,236,119,89,78,43,21,133,204,103,189,95,47,23,105,53,121,60,86,164,220,110,
        55,149,75,71,172,86,72,170,218,131,65,174,87,42,249,243,120,178,180},
    {72,37,157,79,168,218,227,255,127,177,88,18,185,58,28,14,6,3,1,142,201,100,12,6,61,144,134,67,175,216,226,113,
        182,101,50,151,250,125,62,149,74,37,19,135,125,176,89,163,225},
    {200,234,251,124,176,214,106,187,93,160,222,47,216,171,218,108,185,211,230,252,126,177,24,12,200,100,10,139,68,35,159,192,239,55,
        27,13,200,235,116,44,153,77,38,157,129,207,233,116,122},
    {193,238,119,59,28,15,136,68,172,87,165,177,186,114,57,147,199,236,118,58,28,14,106,53,119,59,76,168,84,43,21,11,138,41,21,10,231,252,
        240,196,236,249,243,121,222,110,184,210,139},
    {6,3,1,142,71,172,217,109,54,27,131,25,84,215,229,252,127,63,144,198,236,248,171,85,115,57,196,99,191,209,231,115,183,141,70,173,
        129,206,103,30,15,6,141,200,61,144,199,99,104},
    {49,150,197,99,49,150,197,99,48,25,12,3,4,79,38,18,134,205,103,51,150,196,232,250,121,179,
        151,75,170,85,164,82,166,216,226,113,178,89,163,92,47,152,195,239,115,183,212,107,49},
    {206,233,116,180,90,45,152,77,168,84,43,237,142,1,1,142,71,173,217,109,185,93,89,45,96,48,22,11,5,141,71,35,158,182,213,107,67,175,87,147,
        198,98,49,150,60,145,198,99,200},       // 8
    {79,39,156,79,168,84,164,83,41,21,133,9,192,226,255,241,246,122,61,144,73,36,214,107,126,177,112,183,213,106,187,92,160,26,12,136,14,7,
        140,229,114,57,29,129,132,205,233,116,255},
    {103,189,208,104,53,27,12,137,68,35,16,246,133,163,223,224,254,126,176,214,106,186,162,80,215,228,248,242,121,178,88,162,80,214,229,252,
        15,137,203,33,159,78,169,219,28,15,7,140,184},
    {120,178,88,163,222,111,185,93,46,23,11,19,144,122,61,30,15,136,202,101,50,25,149,196,117,58,35,158,193,238,249,124,176,79,168,84,61,
        145,72,166,83,167,83,166,202,235,251,125,166},
    {21,132,204,232,116,58,29,128,64,174,217,87,159,186,93,46,23,11,139,69,172,216,217,226,196,236,128,64,32,16,134,67,175,108,184,92,21,11,
        5,188,208,230,253,126,138,203,235,251,200},
    {240,120,60,144,198,237,248,124,62,31,129,107,145,78,39,157,78,39,19,135,205,102,24,130,229,252,48,150,197,98,49,150,75,14,7,3,43,155,195,
        87,165,82,41,154,233,250,243,121,22},
    {78,168,218,108,184,92,160,80,166,83,41,90,98,37,18,134,66,33,16,135,66,174,24,13,73,36,100,51,24,13,136,202,235,181,213,229,61,31,14,236,
        119,180,213,228,60,31,14,6,195},
    {98,191,95,47,23,11,4,141,71,173,217,146,183,7,141,70,35,158,193,239,118,181,43,20,123,60,6,141,71,35,159,78,38,237,249,125,193,238,248,
        138,203,101,188,94,94,47,23,133,189},
    {254,127,62,144,199,236,118,181,90,163,81,53,136,50,24,130,64,32,17,8,5,140,90,163,195,239,89,163,80,166,221,225,254,99,191,209,251,
        125,177,110,184,210,105,186,206,232,250,125,34},    // 16
    {53,26,13,6,2,143,200,101,189,208,104,52,149,44,152,194,239,119,59,28,129,65,174,217,226,254,125,176,88,162,81,41,154,76,39,157,78,39,
        19,254,127,62,31,14,137,68,34,16,8},
    {228,252,240,120,178,215,229,253,127,176,88,60,14,245,123,179,89,44,153,194,96,190,192,96,32,16,177,214,229,115,183,213,229,98,191,94,
        62,145,198,234,116,180,212,228,99,49,24,130,222},
    {219,227,113,182,213,106,52,149,197,236,119,48,157,14,136,202,235,250,125,177,88,162,213,229,120,61,104,186,210,231,115,56,28,138,68,35,27,
        131,64,233,116,58,29,128,74,171,85,42,145},
    {94,161,80,166,83,41,154,77,168,218,227,225,110,128,206,103,189,208,104,186,211,231,108,184,204,232,214,107,53,148,196,99,191,65,32,158,
        223,225,254,83,166,221,110,185,204,232,250,243,233},
    {106,187,211,105,186,211,230,115,183,91,163,13,212,223,111,184,92,160,80,40,20,10,89,44,196,98,65,174,87,43,21,132,66,243,247,123,239,249,
        124,98,191,208,104,186,1,142,71,35,77},
    {43,21,132,66,175,217,226,113,182,91,45,211,172,250,125,62,145,198,237,118,181,90,232,116,
        113,56,148,74,37,156,78,169,218,38,19,135,8,138,69,22,132,205,103,188,154,76,169,85,97},
    {229,114,57,28,14,137,202,100,51,24,130,180,174,78,169,218,109,54,26,131,64,32,228,114,204,232,125,177,215,106,187,211,104,193,238,248,
        7,3,1,67,32,16,134,66,91,45,22,133,56},
    {229,115,57,28,14,137,202,101,50,25,130,180,175,79,169,218,109,54,27,131,65,32,228,114,204,232,125,176,214,107,187,211,105,193,238,249,
        7,3,1,67,33,16,134,66,90,45,22,133,57},    // 24
    {128,64,174,217,226,113,56,28,15,6,2,182,237,37,18,9,4,140,200,234,250,243,64,32,41,20,115,57,28,128,206,232,116,2,1,142,127,176,88,
        127,177,214,228,115,1,142,200,100,10},
    {241,120,178,215,107,187,210,231,253,240,247,176,147,51,24,130,207,103,189,208,230,115,242,247,62,145,233,116,58,29,14,7,141,3,143,201,
        33,16,134,246,245,122,179,89,105,52,26,13,205},
    {129,64,32,16,8,4,140,70,173,86,42,110,194,86,43,20,10,139,202,101,188,94,219,108,195,96,153,76,38,157,78,39,18,253,240,247,1,142,200,
        177,214,229,252,127,69,172,86,164,166},
    {162,81,40,20,10,5,140,200,234,251,124,35,12,116,180,212,228,114,183,213,106,186,65,33,12,7,74,37,18,9,138,68,173,196,236,119,38,19,8,
        78,39,157,78,38,129,64,174,86,55},   // 28
    {207,233,116,58,28,15,6,141,200,234,116,238,163,15,7,140,200,235,117,181,212,229,41,20,81,41,36,156,192,239,249,124,62,68,172,217,55,27,
        130,253,240,121,178,88,249,125,176,215,190},
    {241,120,178,215,107,187,211,231,253,241,246,177,147,51,25,130,207,103,189,208,231,115,243,246,63,145,233,116,58,29,14,6,141,3,143,201,33,
        17,134,246,245,122,178,89,105,52,27,12,205},
    {122,61,31,128,65,174,217,109,54,148,197,228,123,188,94,47,23,10,5,2,142,201,227,255,119,59,230,114,183,213,106,186,93,169,219,109,63,31,
        15,213,106,53,27,130,72,171,84,164,90},
    {91,45,22,10,138,68,34,16,134,67,174,14,209,144,73,170,218,109,55,27,131,207,177,215,189,209,215,229,253,126,177,215,228,42,21,10,93,
        160,222,63,145,72,170,84,115,57,146,72,124},   // 32
    {241,120,178,214,107,187,211,231,253,240,246,177,146,51,25,130,207,102,189,208,230,114,242,246,62,144,233,116,58,29,14,7,140,3,143,
        200,33,16,135,246,245,122,179,88,105,52,26,12,205},
    {155,194,96,48,151,74,170,85,43,20,11,191,107,227,113,56,28,129,64,32,158,192,218,226,202,235,154,77,169,85,165,220,111,2,1,1,187,93,
        47,251,125,177,88,44,172,86,42,154,247},
    {93,46,153,76,38,157,78,39,19,9,5,206,171,53,148,74,171,85,164,82,41,154,129,206,37,157,249,242,121,178,215,107,53,88,162,223,163,81,40,
        238,249,124,62,145,10,139,203,235,184},
    {53,26,131,207,232,250,125,62,31,129,64,237,187,94,161,222,224,112,56,146,199,237,53,148,9,138,150,197,99,191,209,230,253,179,215,229,
        49,24,130,48,25,12,6,3,204,102,189,208,165},    // 36
    {92,46,23,133,204,232,250,125,177,88,45,23,132,70,173,86,165,82,167,221,110,55,27,130,207,232,19,135,67,175,87,165,83,167,82,166,221,110,
        184,32,158,79,39,156,78,169,84,43,21},
    {148,196,236,119,58,28,14,6,140,71,173,59,112,227,113,57,146,198,236,249,125,62,115,183,54,149,42,155,195,239,119,59,29,99,49,25,97,48,24,
        99,48,25,130,207,11,138,203,235,25},
    {62,145,72,170,219,227,255,241,247,245,245,132,50,65,32,16,134,205,102,51,25,131,48,151,180,213,21,10,5,140,200,234,116,75,171,218,
        28,128,64,170,85,42,155,194,16,134,67,174,168},
    {119,59,147,199,99,49,25,13,7,3,1,197,40,188,208,104,52,149,74,170,219,108,243,247,190,209,135,205,103,51,25,13,136,129,65,32,213,228,
        252,55,27,130,65,33,213,228,252,127,116},      // 40
    {53,26,131,207,233,250,125,63,30,128,64,237,187,94,161,222,225,112,57,146,198,237,52,149,9,138,150,197,98,190,209,230,253,179,215,228,49,
        24,130,48,25,12,6,3,205,102,189,208,164},
    {162,80,41,20,10,5,140,200,234,251,125,35,12,117,180,213,228,114,183,213,106,186,65,33,13,7,74,37,19,9,138,69,173,196,236,118,39,19,9,78,
        39,157,78,38,129,64,175,86,55},
    {78,39,19,135,67,33,16,8,138,69,172,209,238,144,198,237,248,124,62,31,15,136,76,38,149,196,154,195,239,119,59,146,199,229,252,240,112,
        56,28,42,21,11,5,140,192,238,119,181,82},
    {78,39,18,134,66,33,16,8,138,69,172,208,238,145,198,236,248,125,62,31,15,137,76,38,149,196,154,194,239,119,58,147,199,229,252,240,112,
        57,28,43,21,10,5,140,192,238,119,181,82},      //  44
    {48,150,197,98,49,150,197,98,49,24,12,3,4,78,39,19,135,205,102,51,151,197,233,251,121,179,151,75,171,85,164,82,167,216,226,113,179,89,
        162,92,46,153,194,239,114,183,213,106,48},
    {92,46,153,76,38,157,78,39,19,9,4,206,171,53,148,74,171,85,164,83,41,154,129,206,37,156,249,242,121,178,215,107,53,88,162,223,163,81,
        40,238,248,124,62,145,10,139,203,235,185},
    {128,206,103,51,25,12,136,68,34,17,134,61,96,145,199,99,191,209,231,115,183,213,21,10,245,244,140,200,234,251,125,176,88,82,41,154,51,
        151,75,185,210,105,52,26,253,126,177,214,155},
    {98,191,95,47,23,10,4,141,70,173,217,147,182,7,141,70,34,159,192,238,118,181,43,21,123,61,6,140,70,35,158,79,39,237,248,124,193,238,249,
        139,203,100,189,94,94,47,22,133,189},    // 48
    {241,120,178,215,107,187,211,231,253,240,247,176,147,51,25,130,207,103,189,208,230,114,242,246,62,144,233,116,58,29,14,7,140,3,143,200,33,
        16,135,246,245,123,178,88,105,52,26,12,205},
    {129,65,174,217,226,113,56,29,15,6,3,183,236,37,19,9,4,140,201,234,250,243,65,33,40,21,115,56,28,129,
        206,233,117,3,0,143,127,176,88,127,177,214,229,114,0,143,201,100,11},
    {107,186,211,105,186,210,230,114,182,91,163,13,212,223,
        110,185,93,160,81,41,20,11,89,44,197,98,65,175,86,43,20,132,66,243,246,122,239,248,124,98,190,208,104,186,0,142,70,34,76},
    {154,195,97,48,150,75,170,84,43,21,10,191,106,226,113,56,28,129,64,33,158,192,218,227,203,235,155,77,169,84,164,221,110,3,0,0,
        186,93,46,250,125,177,88,45,173,86,43,154,247},
    {148,74,171,85,42,21,11,5,2,1,0,105,211,36,156,78,39,157,192,238,119,181,189,208,1,0,62,31,15,137,69,172,86,204,232,116,83,41,154,107,
        53,148,74,170,178,89,44,152,37},
    {0,0,142,71,173,86,43,155,195,239,119,218,2,125,62,31,129,64,174,87,43,21,235,117,219,109,217,226,255,127,63,145,198,12,136,202,10,
        138,69,161,80,41,154,195,128,207,233,116,219},
    {110,184,211,105,53,148,196,237,119,58,29,178,228,7,3,0,0,0,143,71,34,17,58,29,178,215,103,51,150,196,236,248,243,196,98,49,43,21,11,105,
        187,210,231,253,194,97,191,95,147},
    {229,114,57,29,15,137,202,101,50,25,130,180,175,79,168,218,108,55,27,131,65,32,229,114,204,232,125,176,215,106,186,210,105,193,238,
        249,7,3,0,67,32,17,135,67,91,45,22,133,57},
    {0,1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0},
    {164,82,167,221,224,254,127,63,31,15,137,224,90,222,111,54,27,13,136,68,172,87,1,0,164,82,87,164,82,167,83,167,221,68,34,17,172,86,43,241,
        120,178,89,44,60,30,129,64,132}
};













